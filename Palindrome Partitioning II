Link: https://oj.leetcode.com/problems/palindrome-partitioning-ii/
Given a string s, partition s such that every substring of the partition is a palindrome.

Return the minimum cuts needed for a palindrome partitioning of s.

For example, given s = "aab",
Return 1 since the palindrome partitioning ["aa","b"] could be produced using 1 cut.

class Solution:
    # @param s, a string
    # @return an integer
    def minCut(self, s):
        # write your code here
        if not s or len(s) == 0:
            return 0
        size = len(s)
        dp = [i - 1 for i in xrange(size + 1)]
        boolean = [[False] * size for i in xrange(size)]
        for i in xrange(1, size + 1):
            for j in xrange(i):
                if s[j] == s[i - 1] and (i - j - 1 <= 2 or boolean[j + 1][i - 2]):
                    boolean[j][i - 1] = True
                    dp[i] = min(dp[i], dp[j] + 1)
        return dp[size]
