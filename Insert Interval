Link: https://oj.leetcode.com/problems/insert-interval/

Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.

Example 1:
Given intervals [1,3],[6,9], insert and merge [2,5] in as [1,5],[6,9].

Example 2:
Given [1,2],[3,5],[6,7],[8,10],[12,16], insert and merge [4,9] in as [1,2],[3,10],[12,16].

This is because the new interval [4,9] overlaps with [3,5],[6,7],[8,10].

"""
Definition of Interval.
class Interval(object):
    def __init__(self, start, end):
        self.start = start
        self.end = end
"""

# O(N*lgN)
class Solution:
    """
    Insert a new interval into a sorted non-overlapping interval list.
    @param intevals: Sorted non-overlapping interval list
    @param newInterval: The new interval.
    @return: A new sorted non-overlapping interval list with the new interval.
    """
    def insert(self, intervals, newInterval):
        results = []
        # write your code here
        if not (intervals or newInterval):
            return results
        intervals.append(newInterval)
        intervals.sort(key = lambda x : x.start)
        for i in xrange(len(intervals)):
            if i == 0:
                results.append(intervals[i])
            else:
                size = len(results)
                if results[size - 1].start <= intervals[i].start <= results[size - 1].end:
                    results[size - 1].end = max(results[size - 1].end, intervals[i].end)
                else:
                    results.append(intervals[i])
    
        return results

# O(N)
"""
Definition of Interval.
class Interval(object):
    def __init__(self, start, end):
        self.start = start
        self.end = end
"""


class Solution:
    """
    Insert a new interval into a sorted non-overlapping interval list.
    @param intevals: Sorted non-overlapping interval list
    @param newInterval: The new interval.
    @return: A new sorted non-overlapping interval list with the new interval.
    """
    def insert(self, intervals, newInterval):
        results = []
        # write your code here
        if not (intervals or newInterval):
            return results
        insertPos = 0
        for interval in intervals:
            if newInterval.start > interval.end:
                results.append(interval)
                insertPos += 1
            elif newInterval.end < interval.start:
                results.append(interval)
            else:
                newInterval.start = min(interval.start, newInterval.start)
                newInterval.end = max(interval.end, newInterval.end)
        results.insert(insertPos, newInterval)
        return results
