Copyright Â© 2015 LeetCode
Question link: https://oj.leetcode.com/problems/convert-sorted-list-to-binary-search-tree/

Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.

"""
Definition of ListNode
class ListNode(object):

    def __init__(self, val, next=None):
        self.val = val
        self.next = next
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        this.val = val
        this.left, this.right = None, None
"""
class Solution:
    """
    @param head: The first node of linked list.
    @return: a tree node
    """
    def sortedListToBST(self, head):
        # write your code here
        nums = []
        node = head
        while node:
            nums.append(node.val)
            node = node.next
        return self.createBST(nums, 0, len(nums) - 1)
    def createBST(self, nums, start, end):
        if start > end:
            return None
        mid = (start + end) / 2
        root = TreeNode(nums[mid])
        root.left = self.createBST(nums, start, mid - 1)
        root.right = self.createBST(nums, mid + 1, end)
        return root

