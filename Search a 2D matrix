Copyright Â© 2015 LeetCode
Question link: https://oj.leetcode.com/problems/search-a-2d-matrix/

Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
For example,

Consider the following matrix:

[
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]

### Convert to a 1-D array:
class Solution:
    """
    @param matrix, a list of lists of integers
    @param target, an integer
    @return a boolean, indicate whether matrix contains target
    """
    def searchMatrix(self, matrix, target):
        # write your code here
        if matrix is None or len(matrix) == 0:
            return False
        rows = len(matrix)
        cols = len(matrix[0])
        start = 0
        end = rows * cols - 1
        while start <= end:
            mid = (start + end) / 2
            # Tricks to treat it as a 1-D array
            digit = matrix[mid / cols][mid % cols]
            if target == digit:
                return True
            elif target > digit:
                start = mid + 1
            else:
                end = mid - 1
        return False
            
### a 2-D array
class Solution:
    # @param matrix, a list of lists of integers
    # @param target, an integer
    # @return a boolean
    def searchMatrix(self, matrix, target):
        if matrix is None or len(matrix) == 0:
            return False
        rows = len(matrix)
        cols = len(matrix[0])
        i = rows - 1
        j = 0
        while i >= 0 and j < cols:
            if matrix[i][j] == target:
                return True
            elif matrix[i][j] > target:
                i -= 1
            else:
                j += 1
        return False
