Link: http://lintcode.com/en/problem/implement-iterator-of-binary-search-tree/#

Design an iterator over a binary search tree with the following properties:
Elements are visited in ascending order (i.e. an inorder traversal)
next() and hasNext() queries run in O(1) time in average.
Example
For the following binary search tree, inorder traversal by using iterator is [1, 6, 10, 11, 12]

      10

    /     \

 1          11

    \           \

       6           12



Challenge
Extra memory usage O(h), h is the height of the tree.
Super Star: Extra memory usage O(1)

"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        this.val = val
        this.left, this.right = None, None

Example of iterate a tree:
iterator = Solution(root)
while iterator.hasNext():
    node = iterator.next()
    do something for node 
"""
class Solution:
    #@param root: The root of binary tree.
    def __init__(self, root):
        # write your code here
        Solution.stack = []
        Solution.curr = root

    #@return: True if there has next node, or false
    def hasNext(self):
        # write your code here
        return Solution.curr or Solution.stack
        
    #@return: return next node
    def next(self):
        #write your code here
        while Solution.curr:
            Solution.stack.append(Solution.curr)
            Solution.curr = Solution.curr.left
        Solution.curr = Solution.stack.pop()
        node = Solution.curr
        Solution.curr = Solution.curr.right
        return node
