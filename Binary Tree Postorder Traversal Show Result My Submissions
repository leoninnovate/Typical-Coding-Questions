Link: https://oj.leetcode.com/problems/binary-tree-postorder-traversal/

Given a binary tree, return the postorder traversal of its nodes' values.

Example
Given binary tree {1,#,2,3},

   1
    \
     2
    /
   3
 

return [3,2,1].

Challenge
Can you do it without recursion?

# Divide and Conqure
"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        this.val = val
        this.left, this.right = None, None
"""


class Solution:
    """
    @param root: The root of binary tree.
    @return: Postorder in ArrayList which contains node values.
    """
    def postorderTraversal(self, root):
        # write your code here
        res = []
        if root is None:
            return res 
        left = self.postorderTraversal(root.left)
        right = self.postorderTraversal(root.right)
        res.extend(left)
        res.extend(right)
        res.append(root.val)
        return res

# Recursive
"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        this.val = val
        this.left, this.right = None, None
"""


class Solution:
    """
    @param root: The root of binary tree.
    @return: Postorder in ArrayList which contains node values.
    """
    def postorderTraversal(self, root):
        # write your code here
        res = []
        self.traverse(root, res)
        return res
    def traverse(self, root, res):
        if root is None:
            return
        self.traverse(root.left, res)
        self.traverse(root.right, res)
        res.append(root.val)

# Iterative
class Solution:
    # @param root, a tree node
    # @return a list of integers
    def postorderTraversal(self, root):
        res, stack, prev = [], [], None
        if root is None:
            return res
        stack.append(root)
        while stack:
            curr = stack[-1]
            # Traverse down the tree
            if prev == None or prev.left == curr or prev.right == curr:
                if curr.left:
                    stack.append(curr.left)
                elif curr.right:
                    stack.append(curr.right)
            # Traverse up the tree from the left
            elif prev == curr.left:
                if curr.right:
                    stack.append(curr.right)
            # Traverse up the tree from the right
            else:
                res.append(curr.val)
                stack.pop()
            prev = curr
        return res
