Copyright Â© 2015 LeetCode
Question link: https://oj.leetcode.com/problems/permutations/

Given a collection of numbers, return all possible permutations.

For example,
[1,2,3] have the following permutations:
[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].

# Iterative method

    def permute(self, nums):
        # write your code here
        if nums is None or len(nums) == 0:
            return []
        res = [[]]
        for i in xrange(len(nums)):
            res = [arr + [num] for arr in res for num in nums if num not in arr]
        return res
        
# Recursive method

    def permute(self, nums):
        # write your code here
        if nums is None or len(nums) == 0:
            return []
        if len(nums) == 1:
            return [nums]
        res = []
        for i in xrange(len(nums)):
            for arr in self.permute(nums[:i] + nums[i+1:]):
                res.append([nums[i]] + arr)
        return res

# DFS

    def permute(self, nums):
        # write your code here
        res = []
        if nums is None or len(nums) ==0:
            return res
        arr = []
        self.helper(nums, res, arr)
        return res
    
    def helper(self, nums, res, arr):
        if len(arr) == len(nums):
            res.append(list(arr))
            return
        for i in xrange(len(nums)):
            if nums[i] in arr:
                continue
            arr.append(nums[i])
            self.helper(nums, res, arr)
            del arr[-1]
