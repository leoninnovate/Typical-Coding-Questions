Link: http://lintcode.com/en/problem/majority-number-ii/

Given an array of integers, the majority number is the number that occurs more than 1/3 of the size of the array.

Find it.

Note
There is only one majority number in the array

Example
For [1, 2, 1, 2, 1, 3, 3] return 1

Challenge
O(n) time and O(1) space

class Solution:
    """
    @param nums: A list of integers
    @return: The majority number occurs more than 1/3
    """
    def majorityNumber(self, nums):
        # write your code here
        maps = {}
        for num in nums:
            if num not in maps:
                maps[num] = 1
            else:
                maps[num] += 1
                if maps[num] > len(nums) / 3:
                    break
        return num

class Solution:
    """
    @param nums: A list of integers
    @return: The majority number occurs more than 1/3
    """
    def majorityNumber(self, nums):
        # write your code here
        currNum1 = -1
        currNum2 = -1
        count1 = 0 
        count2 = 0
        for num in nums:
            if num == currNum1:
                count1 += 1
            elif num == currNum2:
                count2 += 1
            elif count1 == 0:
                currNum1 = num
                count1 = 1
            elif count2 == 0:
                currNum2 = num
                count2 = 1
            else:
                count1 -= 1
                count2 -= 1
        count1 = 0
        count2 = 0
        for num in nums:
            if num == currNum1:
                count1 += 1
            elif num == currNum2:
                count2 += 1
        if count1 < count2:
            return currNum2
        return currNum1

