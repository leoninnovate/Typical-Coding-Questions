Copyright © 2015 LeetCode
Question link: https://oj.leetcode.com/problems/find-peak-element/

A peak element is an element that is greater than its neighbors.

Given an input array where num[i] ≠ num[i+1], find a peak element and return its index.

The array may contain multiple peaks, in that case return the index to any one of the peaks is fine.

You may imagine that num[-1] = num[n] = -∞.

For example, in array [1, 2, 3, 1], 3 is a peak element and your function should return the index number 2.

click to show spoilers.

Note:
Your solution should be in logarithmic complexity.

Credits:
Special thanks to @ts for adding this problem and creating all test cases.

# O(n)
class Solution:
    #@param A: An integers list.
    #@return: return any of peek positions.
    def findPeak(self, A):
        # write your code here
        if len(A) < 2:
            return 0
        for i in xrange(len(A)):
            if i == 0:
                if A[i] > A[i + 1]:
                    return i
                continue
            
            if i == len(A) - 1:
                if A[i] > A[i - 1]:
                    return i
                continue
            
            if A[i] > A[i + 1] and A[i] > A[i - 1]:
                return i
        
        return -1
        
# O(lg(n))
class Solution:
    #@param A: An integers list.
    #@return: return any of peek positions.
    def findPeak(self, A):
        # write your code here
        if len(A) < 2:
            return 0
        start = 0
        end = len(A) - 1
        while start + 1 < end:
            mid = start + (end - start) /2
            if A[mid] > A[mid - 1] and A[mid] > A[mid + 1]:
                return mid
            if A[mid] > A[mid - 1] and A[mid] < A[mid + 1]:
                start = mid
            elif A[mid] < A[mid - 1] and A[mid] > A[mid + 1]:
                end = mid
            else:
                start = mid
        return start if A[start] > A[end] else end

                
