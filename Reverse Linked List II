Link: https://oj.leetcode.com/problems/reverse-linked-list-ii/

Reverse a linked list from position m to n. Do it in-place and in one-pass.

For example:
Given 1->2->3->4->5->NULL, m = 2 and n = 4,

return 1->4->3->2->5->NULL.

Note:
Given m, n satisfy the following condition:
1 ≤ m ≤ n ≤ length of list.

"""
Definition of ListNode

class ListNode(object):

    def __init__(self, val, next=None):
        self.val = val
        self.next = next
"""
class Solution:
    """
    @param head: The head of linked list
    @param m: start position
    @param n: end position
    """
    def reverseBetween(self, head, m, n):
        # write your code here
        if m >= n or head is None:
            return head
        dummy = ListNode(0)
        dummy.next = head
        node = dummy
        for i in xrange(1, m):
            if not node:
                return None
            node = node.next
        preNode = node
        mNode = node.next
        nNode = mNode
        postnNode = mNode.next
        for i in xrange(m, n):
            tmp = postnNode.next
            postnNode.next = nNode
            nNode = postnNode
            postnNode = tmp
        mNode.next = postnNode
        preNode.next = nNode
        return dummy.next
