Link: https://oj.leetcode.com/problems/generate-parentheses/

Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:

"((()))", "(()())", "(())()", "()(())", "()()()"

class Solution:
    # @param an integer
    # @return a list of string
    def generateParenthesis(self, n):
        res = []
        if n == 0:
            return res
        self.getPair(res, n, n, '')
        return res
        
    def getPair(self, res, left, right, path):
        if left < 0 or right < 0 or left > right:
            return 
        if left == 0 and right == 0:
            res.append(path)
            return
        self.getPair(res, left - 1, right, path + '(')
        self.getPair(res, left, right - 1, path + ')')

        
