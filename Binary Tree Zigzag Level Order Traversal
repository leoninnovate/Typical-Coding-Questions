Link: https://oj.leetcode.com/problems/binary-tree-zigzag-level-order-traversal/

Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

Example
Given binary tree {3,9,20,#,#,15,7},

    3
   / \
  9  20
    /  \
   15   7
 

return its zigzag level order traversal as:

[
  [3],
  [20,9],
  [15,7]
]

"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        this.val = val
        this.left, this.right = None, None
"""


class Solution:
    """
    @param root: The root of binary tree.
    @return: A list of list of integer include 
             the zig zag level order traversal of its nodes' values
    """
    def zigzagLevelOrder(self, root):
        # write your code here
        res = [] 
        if root is None:
            return res
        stack = [] 
        stack.append(root)
        index = 0
        while stack:
            level = []
            size = len(stack)
            for i in xrange(size):
                node = stack[0]
                level.append(node.val)
                del stack[0]
                if node.left:
                    stack.append(node.left)
                if node.right:
                    stack.append(node.right)
            if not index % 2:
                res.append(level)
            else:
                res.append(level[::-1])
            index += 1
        return res
