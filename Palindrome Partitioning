Link: https://oj.leetcode.com/problems/palindrome-partitioning/
Given a string s, partition s such that every substring of the partition is a palindrome.

Return all possible palindrome partitioning of s.

Example
given s = "aab",
Return

  [
    ["aa","b"],
    ["a","a","b"]
  ]
  

class Solution:
    # @param s, a string
    # @return a list of lists of string
    def partition(self, s):
        # write your code here
        res = []
        if not s or len(s) == 0:
            return res
        path = []
        self.DFS(s, path, 0, res)
        return res
    def isPalindrome(self, arr):
        if not arr or len(arr) == 0:
            return True
        left = 0
        right = len(arr) - 1
        while left < right:
            if arr[left] != arr[right]:
                return False
            left += 1
            right -= 1
        return True
        
    def DFS(self, s, path, pos, res):
        if pos == len(s):
            res.append(list(path))
            return
        for i in xrange(pos + 1, len(s) + 1):
            subString = s[pos : i]
            if not self.isPalindrome(subString):
                continue
            path.append(subString)
            self.DFS(s, path, i, res)
            del path[-1]
