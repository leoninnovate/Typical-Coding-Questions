Link: http://lintcode.com/en/problem/combination-sum/#

Given a set of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

The same repeated number may be chosen from C unlimited number of times.



For example, given candidate set 2,3,6,7 and target 7, 
A solution set is: 
[7] 
[2, 2, 3] 

Note
All numbers (including target) will be positive integers.
Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).
The solution set must not contain duplicate combinations.
Example
given candidate set 2,3,6,7 and target 7, 
A solution set is: 
[7] 
[2, 2, 3] 


class Solution:
    # @param candidates, a list of integers
    # @param target, integer
    # @return a list of lists of integers
    def combinationSum(self, candidates, target):
        # write your code here
        res = []
        if not candidates or len(candidates) == 0:
            return res
        candidates.sort()
        self.dfs(candidates, target, [], res, 0)
        return res
        
    def dfs(self, candidates, target, path, res, pos):
        if target < 0:
            return 
        if target == 0:
            res.append(list(path))
            return
        size = len(candidates)
        for i in xrange(pos, size):
            num = candidates[i]
            path.append(num)
            self.dfs(candidates, target - num, path, res, i)
            del path[-1]
