Link: http://lintcode.com/en/problem/search-range-in-binary-search-tree/#

Given two values k1 and k2 (where k1 < k2) and a root pointer to a Binary Search Tree. Find all the keys of tree in range k1 to k2. i.e. print all x such that k1<=x<=k2 and x is a key of given BST. Return all the keys in ascending order.

Example
For example, if k1 = 10 and k2 = 22, then your function should print 12, 20 and 22.

          20

       /        \

    8           22

  /     \

4       12

"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        this.val = val
        this.left, this.right = None, None
"""
class Solution:
    """
    @param root: The root of the binary search tree.
    @param k1 and k2: range k1 to k2.
    @return: Return all keys that k1<=key<=k2 in ascending order.
    """     
    def searchRange(self, root, k1, k2):
        # write your code here
        Solution.res = [] 
        self.helper(root, k1, k2)
        return Solution.res
    def helper(self, root, k1, k2):
        if root is None:
            return 
        if root.val > k1:
            self.helper(root.left, k1, k2)
        if k1 <= root.val <= k2:
            Solution.res.append(root.val)
        if root.val < k2:
            self.helper(root.right, k1, k2)
