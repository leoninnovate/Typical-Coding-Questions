Copyright © 2015 LeetCode
Question link: https://oj.leetcode.com/problems/merge-k-sorted-lists/

Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

维护一个大小为k的堆，每次取堆顶的最小元素放到结果中， 然后读取该元素的下一个元素放入堆中，重新维护好。因为每个链表是有序的，每次又是去当前k个元素中最小的，所以当所有链表都读完时结束，这个时候所有元 素按从小到大放在结果链表中。这个算法每个元素要读取一次，即是k*n次，然后每次读取元素要把新元素插入堆中要logk的复杂度，所以总时间复杂度是 O(nklogk)。空间复杂度是堆的大小
"""
Definition of ListNode
class ListNode(object):

    def __init__(self, val, next=None):
        self.val = val
        self.next = next
"""
import heapq
class Solution:
    """
    @param lists: a list of ListNode
    @return: The head of one sorted list.
    """
    def mergeKLists(self, lists):
        # write your code here
        heap=[]
        for node in lists:
            if node:
                heap.append((node.val, node))
        heapq.heapify(heap)
        head=ListNode(0);
        curr=head
        while heap:
            pop=heapq.heappop(heap)
            curr.next=ListNode(pop[0])
            curr=curr.next
            if pop[1].next:
                heapq.heappush(heap,(pop[1].next.val, pop[1].next))
        return head.next


假设总共有k个list，每个list的最大长度是n，那么运行时间满足递推式T(k) = 2T(k/2)+O(n*k)。根据主定理，可以算出算法的总复杂度是O(nklogk)。
"""
Definition of ListNode
class ListNode(object):

    def __init__(self, val, next=None):
        self.val = val
        self.next = next
"""
class Solution:
    """
    @param lists: a list of ListNode
    @return: The head of one sorted list.
    """
    def mergeKLists(self, lists):
        # write your code here
        if lists is None or len(lists) == 0:
            return None
        return self.traverse(lists, 0, len(lists) - 1)
    def merge(self, head1, head2):
        dummy = ListNode(0)
        node = dummy
        while head1 and head2:
            if head1.val < head2.val:
                node.next = head1
                head1 = head1.next
            else:
                node.next = head2
                head2 = head2.next
            node = node.next
        if head1:
            node.next = head1
        if head2:
            node.next = head2
        return dummy.next
    def traverse(self, lists, start, end):
        if start < end:
            mid = start + (end - start) / 2
            return self.merge(self.traverse(lists, start, mid), self.traverse(lists, mid + 1, end))
        return lists[start]
