Link: http://www.lintcode.com/en/problem/median-of-two-sorted-arrays/#

There are two sorted arrays A and B of size m and n respectively. Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

Example
For A = [1,2,3,4,5,6] B = [2,3,4,5], the median is 3.5

For A = [1,2,3] B = [4,5], the median is 3

 

Challenge
Time Complexity O(logn)

class Solution:
    """
    @param A: An integer array.
    @param B: An integer array.
    @return: a double whose format is *.5 or *.0
    """
    def findMedianSortedArrays(self, A, B):
        # write your code here
        size = len(A) + len(B)
        if size%2 == 0:
            return (self.findKth(A, 0, B, 0, size/2) + self.findKth(A, 0, B, 0, size/2 + 1))/2.0
        else:
            return self.findKth(A, 0, B, 0, size/2 + 1)
            
    def findKth(self, A, Astart, B, Bstart, k):
        if Astart >= len(A):
            return B[Bstart + k - 1]
        if Bstart >= len(B):
            return A[Astart + k - 1]
        if k == 1:
            return min(A[Astart], B[Bstart])
        Akey = A[Astart + k/2 - 1] if Astart + k/2 - 1 < len(A) else 2**32
        Bkey = B[Bstart + k/2 - 1] if Bstart + k/2 - 1 < len(B) else 2**32
        if Akey < Bkey:
            return self.findKth(A, Astart + k/2, B, Bstart, k - k/2)
        else:
            return self.findKth(A, Astart, B, Bstart + k/2, k - k/2)
            
