Link: http://lintcode.com/en/problem/lowest-common-ancestor/#

Given the root and two nodes in a Binary Tree. Find the lowest common ancestor(LCA) of the two nodes.

The lowest common ancestor is the node with largest depth which is the ancestor of both nodes.

Example
        4

    /     \

  3         7

          /     \

        5         6

For 3 and 5, the LCA is 4.

For 5 and 6, the LCA is 7.

For 6 and 7, the LCA is 7.

#### O(n^2), Top - Down
First, just for fun, we assume that the tree contains n nodes and is balanced (with its height equals to log(n) ). In this case, the run time complexity would be O(n). Most people would guess a higher ordered complexity than O(n) due to the function countMatchesPQ() traverses the same nodes over and over again. Notice that the tree is balanced, you cut off half of the nodes you need to traverse in each recursive call of LCA() function. The proof that the complexity is indeed O(n) is left as an exercise to the reader.

What if the tree is not necessarily balanced? Then in the worst case the complexity could go up to O(n2). Why? Could you come up with such case?
"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        this.val = val
        this.left, this.right = None, None
"""
import copy
class Solution:
    """
    @param root: The root of the binary search tree.
    @param A and B: two nodes in a Binary.
    @return: Return the least common ancestor(LCA) of the two nodes.
    """ 
    def lowestCommonAncestor(self, root, A, B):
        # write your code here
        if not (root and A and B):
            return None
        if root == A or root == B:
            return root
        left = self.count(root.left, A, B)
        if left == 1:
            return root
        elif left == 2:
            return self.lowestCommonAncestor(root.left, A, B)
        else:
            return self.lowestCommonAncestor(root.right, A, B)
            
    def count(self, root, A, B):
        if not root:
            return 0
        num = self.count(root.left, A, B) + self.count(root.right, A, B)
        if root == A or root == B:
            return num + 1
        else:
            return num
            
## O(N), Bottom - Up
"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        this.val = val
        this.left, this.right = None, None
"""
import copy
class Solution:
    """
    @param root: The root of the binary search tree.
    @param A and B: two nodes in a Binary.
    @return: Return the least common ancestor(LCA) of the two nodes.
    """ 
    def lowestCommonAncestor(self, root, A, B):
        # write your code here
        if not root:
            return None
        if root == A or root == B:
            return root
        L = self.lowestCommonAncestor(root.left, A, B)
        R = self.lowestCommonAncestor(root.right, A, B)
        if L and R:
            return root
        return L if L else R
