Copyright Â© 2015 LeetCode
Question link: https://oj.leetcode.com/problems/permutations-ii/

Given a collection of numbers that might contain duplicates, return all possible unique permutations.

For example,
[1,1,2] have the following unique permutations:
[1,1,2], [1,2,1], and [2,1,1].

# Recursive method

    def permuteUnique(self, nums):
        # write your code here
        res = []
        if nums is None or len(nums) == 0:
            return res
        if len(nums) == 1:
            return [nums]
        
        nums.sort()
        prevNum = None
        for i in xrange(len(nums)):
            if nums[i] == prevNum:
                continue
            prevNum = nums[i]
            
            for j in self.permuteUnique(nums[:i] + nums[i+1:]):
                res.append([nums[i]] + j)
        return res

# DFS

    def permuteUnique(self, nums):
        # write your code here
        res = []
        if nums is None or len(nums) == 0:
            return res
        visited = [0 for i in xrange(len(nums))]
        nums.sort()
        arr = []
        self.helper(nums, res, arr, visited)
        return res
        
    def helper(self, nums, res, arr, visited):
        if len(arr) == len(nums):
            res.append(list(arr))
            return 
        for i in xrange(len(nums)):
            if (visited[i] == 1) or (i != 0 and nums[i] == nums[i-1] and visited[i-1] == 0):
                continue
            visited[i] = 1
            arr.append(nums[i])
            self.helper(nums, res, arr, visited)
            del arr[-1]
            visited[i] = 0

