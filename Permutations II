Copyright Â© 2015 LeetCode
Question link: https://oj.leetcode.com/problems/permutations-ii/

Given a collection of numbers that might contain duplicates, return all possible unique permutations.

For example,
[1,1,2] have the following unique permutations:
[1,1,2], [1,2,1], and [2,1,1].

# Recursive method

    def permuteUnique(self, nums):
        # write your code here
        res = []
        if nums is None or len(nums) == 0:
            return res
        if len(nums) == 1:
            return [nums]
        
        nums.sort()
        prevNum = None
        for i in xrange(len(nums)):
            if nums[i] == prevNum:
                continue
            prevNum = nums[i]
            
            for j in self.permuteUnique(nums[:i] + nums[i+1:]):
                res.append([nums[i]] + j)
        return res

# DFS

class Solution:
    """
    @param nums: A list of integers.
    @return: A list of unique permutations.
    """
    def permuteUnique(self, nums):
        # write your code here
        res = []
        if not nums or len(nums) == 0:
            return res
        path = []
        nums.sort()
        visited = [0] * len(nums)
        self.DFS(nums, path, res, visited)
        return res
    def DFS(self, nums, path, res, visited):
        if len(path) == len(nums):
            res.append(path)
        for i in xrange(len(nums)):
            if visited[i] or (i != 0 and nums[i] == nums[i - 1] and visited[i - 1]):
                continue
            visited[i] = 1
            self.DFS(nums, path + [nums[i]], res, visited)
            visited[i] = 0
