Link: https://oj.leetcode.com/problems/clone-graph/

Clone an undirected graph. Each node in the graph contains a label and a list of its neighbors.


OJ's undirected graph serialization:
Nodes are labeled uniquely.

We use # as a separator for each node, and , as a separator for node label and each neighbor of the node.
As an example, consider the serialized graph {0,1,2#1,2#2,2}.

The graph has a total of three nodes, and therefore contains three parts as separated by #.

First node is labeled as 0. Connect node 0 to both nodes 1 and 2.
Second node is labeled as 1. Connect node 1 to node 2.
Third node is labeled as 2. Connect node 2 to node 2 (itself), thus forming a self-cycle.
Visually, the graph looks like the following:

       1
      / \
     /   \
    0 --- 2
         / \
         \_/
  
  
### BFS       
# Definition for a undirected graph node
# class UndirectedGraphNode:
#     def __init__(self, x):
#         self.label = x
#         self.neighbors = []

class Solution:
    # @param node, a undirected graph node
    # @return a undirected graph node
    def cloneGraph(self, node):
        if node == None:
            return None
        stack = []
        maps = {}
        copy = UndirectedGraphNode(node.label)
        stack.append(node)
        maps[node] = copy
        while stack:
            curr = stack.pop()
            for neighbor in curr.neighbors:
                if neighbor not in maps:
                    copy = UndirectedGraphNode(neighbor.label)
                    maps[curr].neighbors.append(copy)
                    maps[neighbor] = copy
                    stack.append(neighbor)
                else:
                    maps[curr].neighbors.append(maps[neighbor])
        return copy
  
  
#### DFS
# Definition for a undirected graph node
# class UndirectedGraphNode:
#     def __init__(self, x):
#         self.label = x
#         self.neighbors = []

class Solution:
    # @param node, a undirected graph node
    # @return a undirected graph node
    def cloneGraph(self, node):
        if not node:
            return None
        return self.DFS(node, {})
    def DFS(self, node, maps):
        if node in maps:
            return maps[node]
        copy = UndirectedGraphNode(node.label)
        maps[node] = copy
        for neighbor in node.neighbors:
            copy.neighbors.append(self.DFS(neighbor, maps))
        return copy


# Definition for a undirected graph node
# class UndirectedGraphNode:
#     def __init__(self, x):
#         self.label = x
#         self.neighbors = []
class Solution:
    # @param node, a undirected graph node
    # @return a undirected graph node
    def __init__(self):
        self.dict = {}
        
    def cloneGraph(self, node):
        # write your code here
        if not node:
            return None
        return self.DFS(node)
        
    def DFS(self, node):
        if node in self.dict:
            return self.dict[node]
            
        copy = UndirectedGraphNode(node.label)
        self.dict[node] = copy
        
        for neighbor in node.neighbors:
            copy.neighbors.append(self.DFS(neighbor))
        return copy
