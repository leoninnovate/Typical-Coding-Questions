Copyright Â© 2015 LeetCode
Question link:https://oj.leetcode.com/problems/search-in-rotated-sorted-array-ii/

Follow up for "Search in Rotated Sorted Array":
What if duplicates are allowed?

Would this affect the run-time complexity? How and why?

Write a function to determine if a given target is in the array.


// it ends up the same as sequential search
// We used linear search for this question just to indicate that the 
// time complexity of this question is O(n) regardless of binary search is applied or not.

# Binary search
class Solution:
    """
    @param A : an integer ratated sorted array and duplicates are allowed
    @param target : an integer to be searched
    @return : a boolean
    """
    def search(self, A, target):
        # write your code here
        if A is None or len(A) == 0:
            return False
        start = 0 
        end = len(A) - 1
        while start + 1 < end:
            mid = start + (end - start)/2
            if A[mid] == target:
                return True
            if A[start] < A[mid]:
                if target >= A[start] and target < A[mid]:
                    end = mid
                else:
                    start = mid
            elif A[start] > A[mid]:
                if target > A[mid] and target <= A[end]:
                    start = mid
                else:
                    end = mid
            else:
                start += 1
        if A[start] == target:
            return True
        if A[end] == target:
            return True
        return False
        
# Linear search
class Solution:
    """
    @param A : an integer ratated sorted array and duplicates are allowed
    @param target : an integer to be searched
    @return : a boolean
    """
    def search(self, A, target):
        # write your code here
        if A is None or len(A) == 0:
            return False
        for i in xrange(len(A)):
            if A[i] == target:
                return True
        return False
