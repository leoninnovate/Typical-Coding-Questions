Link: http://lintcode.com/en/problem/3-sum/#

Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note
Elements in a triplet (a,b,c) must be in non-descending order. (ie, a ≤ b ≤ c)

The solution set must not contain duplicate triplets.

Example
For example, given array S = {-1 0 1 2 -1 -4}, A solution set is:

(-1, 0, 1)

(-1, -1, 2)

class Solution:
    """
    @param numbersbers : Give an array numbersbers of n integer
    @return : Find all unique triplets in the array which gives the sum of zero.
    """
    def threeSum(self, numbers):
        # write your code here
        res = []
        if not numbers or len(numbers) < 3:
            return res
        numbers.sort() 
        size = len(numbers)
        for i in xrange(size - 2):
            if i != 0 and numbers[i] == numbers[i - 1]:
                continue
            else:
                left = i + 1
                right = size - 1
                while left < right:
                    curr = numbers[i] + numbers[left] + numbers[right]
                    if curr == 0:
                        tmp = [numbers[i], numbers[left], numbers[right]]
                        res.append(tmp)
                        left += 1
                        right -= 1
                        while left < right and numbers[left] == numbers[left - 1]:
                            left += 1
                        while left < right and numbers[right] == numbers[right + 1]:
                            right -= 1
                    elif curr < 0:
                        left += 1
                    else:
                        right -= 1
        return res
