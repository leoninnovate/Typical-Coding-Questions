Link: https://oj.leetcode.com/problems/first-missing-positive/

Given an unsorted integer array, find the first missing positive integer.

For example,
Given [1,2,0] return 3,
and [3,4,-1,1] return 2.

Your algorithm should run in O(n) time and uses constant space.

class Solution:
    # @param A, a list of integers
    # @return an integer
    def firstMissingPositive(self, A):
        if not A or len(A) == 0:
            return 1
        size = len(A)
        for i in xrange(size):
            while A[i] <= size and A[i] > 0 and A[i] != A[A[i] - 1]:
                A[i], A[A[i] - 1] = A[A[i] - 1], A[i]
        for i in xrange(size):
            if A[i] != i + 1:
                return i + 1
        return size + 1
