Link: http://lintcode.com/en/problem/word-ladder/#

Given two words (start and end), and a dictionary, find the length of shortest transformation sequence from start to end, such that:

Only one letter can be changed at a time
Each intermediate word must exist in the dictionary
Note
Return 0 if there is no such transformation sequence.
All words have the same length.
All words contain only lowercase alphabetic characters.
Example
Given:
start = "hit"
end = "cog"
dict = ["hot","dot","dog","lot","log"]
As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
return its length 5.

class Solution:
    # @param start, a string
    # @param end, a string
    # @param dict, a set of string
    # @return an integer
    def ladderLength(self, start, end, dict):
        # write your code here
        if not dict or len(dict) == 0:
            return 0
        stack = []
        stack.append(start)
        dict.remove(start)
        res = 1
        while stack:
            count = len(stack)
            for i in xrange(count):
                curr = stack[0]
                del stack[0]
                for c in 'abcdefghijklmnopqrstuvwxyz':
                    for j in xrange(len(curr)):
                        if c == curr[j]:
                            continue
                        tmp = self.replace(curr, j, c)
                        if tmp == end:
                            return res + 1
                        if tmp in dict:
                            stack.append(tmp)
                            dict.remove(tmp)
            res += 1
        return 0
        
    def replace(self, s, index, c):
        chars = list(s)
        chars[index] = c
        return ''.join(chars)
