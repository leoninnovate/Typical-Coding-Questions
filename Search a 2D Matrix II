Link: http://lintcode.com/en/problem/search-a-2d-matrix-ii/#
Write an efficient algorithm that searches for a value in an m x n matrix, return the occurrence of it.

This matrix has the following properties:

    * Integers in each row are sorted from left to right.

    * Integers in each column are sorted from up to bottom.

    * No duplicate integers in each row or column.

Example
Consider the following matrix:

[

    [1, 3, 5, 7],

    [2, 4, 7, 8],

    [3, 5, 9, 10]

]

Given target = 3, return 2.

Challenge
O(m+n) time and O(1) extra space

class Solution:
    """
    @param matrix: An list of lists of integers
    @param target: An integer you want to search in matrix
    @return: An integer indicates the total occurrence of target in the given matrix
    """
    def searchMatrix(self, matrix, target):
        # write your code here
        count = 0
        if matrix is None or len(matrix) == 0:
            return count
        rows = len(matrix)
        cols = len(matrix[0])
        i = rows - 1
        j = 0
        while i >= 0 and j < cols:
            if matrix[i][j] == target:
                count += 1
                j += 1
                i -= 1
            elif matrix[i][j] < target:
                j += 1
            else:
                i -= 1
        return count
